package org.zoobastiks.ztelegram.game

import org.bukkit.Bukkit
import org.bukkit.configuration.file.FileConfiguration
import org.bukkit.configuration.file.YamlConfiguration
import org.zoobastiks.ztelegram.ZTele
import java.io.File
import java.util.*
import kotlin.random.Random

class GameManager(private val plugin: ZTele) {
    private val gameFile = File(plugin.dataFolder, "game.yml")
    private lateinit var gameConfig: FileConfiguration
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
    var enabled: Boolean = true
    var gameCommandEnabled: Boolean = true
    var rewardAmount: Double = 5.0
    var rewardCommands: List<String> = listOf("eco give %player% 5")
    
    // –°–æ–æ–±—â–µ–Ω–∏—è
    var gameStartMessage: String = "üéÆ –ò–≥—Ä–∞ \"–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ\" –Ω–∞—á–∞–ª–∞—Å—å!\nüéØ –£–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ: %word%\n‚è±Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å %time% —Å–µ–∫—É–Ω–¥!"
    var gameWinMessage: String = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ: %word%\nüéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ %reward% –º–æ–Ω–µ—Ç!"
    var gameLoseMessage: String = "üò¢ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ: %word%\nüîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /game –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã."
    var gameAlreadyPlayingMessage: String = "‚ùå –í—ã —É–∂–µ –∏–≥—Ä–∞–µ—Ç–µ! –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É."
    var gameNotRegisteredMessage: String = "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –∫–∞–Ω–∞–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
    var gamePlayerNotFoundMessage: String = "‚ùå –ò–≥—Ä–æ–∫ %player% –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º."
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    var gameTimeSeconds: Int = 60
    
    // –°–ª–æ–≤–∞ –¥–ª—è –∏–≥—Ä—ã
    private var wordsList: List<WordPair> = listOf()
    
    // –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã: telegramUsername -> GameSession
    private val activeGames = mutableMapOf<String, GameSession>()
    
    // –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä—ã —Å–ª–æ–≤ (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏)
    data class WordPair(val original: String, val masked: String)
    
    // –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä–µ
    data class GameSession(
        val playerName: String,
        val wordPair: WordPair,
        val startTime: Long,
        var taskId: Int = -1
    )
    
    init {
        if (!gameFile.exists()) {
            plugin.saveResource("game.yml", false)
        }
        
        loadConfig()
    }
    
    fun reload() {
        loadConfig()
    }
    
    private fun loadConfig() {
        try {
            gameConfig = YamlConfiguration.loadConfiguration(gameFile)
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            enabled = gameConfig.getBoolean("enabled", true)
            gameCommandEnabled = gameConfig.getBoolean("command.enabled", true)
            rewardAmount = gameConfig.getDouble("reward.amount", 5.0)
            rewardCommands = gameConfig.getStringList("reward.commands")
            if (rewardCommands.isEmpty()) {
                rewardCommands = listOf("eco give %player% 5")
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            gameStartMessage = gameConfig.getString("messages.game_start", gameStartMessage) ?: gameStartMessage
            gameWinMessage = gameConfig.getString("messages.game_win", gameWinMessage) ?: gameWinMessage
            gameLoseMessage = gameConfig.getString("messages.game_lose", gameLoseMessage) ?: gameLoseMessage
            gameAlreadyPlayingMessage = gameConfig.getString("messages.already_playing", gameAlreadyPlayingMessage) ?: gameAlreadyPlayingMessage
            gameNotRegisteredMessage = gameConfig.getString("messages.not_registered", gameNotRegisteredMessage) ?: gameNotRegisteredMessage
            gamePlayerNotFoundMessage = gameConfig.getString("messages.player_not_found", gamePlayerNotFoundMessage) ?: gamePlayerNotFoundMessage
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
            gameTimeSeconds = gameConfig.getInt("settings.time_seconds", 60)
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –∏–≥—Ä—ã
            val wordsSection = gameConfig.getConfigurationSection("words")
            val wordsList = mutableListOf<WordPair>()
            
            if (wordsSection != null) {
                for (key in wordsSection.getKeys(false)) {
                    val originalWord = wordsSection.getString("$key.original")
                    val maskedWord = wordsSection.getString("$key.masked")
                    
                    if (originalWord != null && maskedWord != null) {
                        wordsList.add(WordPair(originalWord, maskedWord))
                    }
                }
            }
            
            if (wordsList.isEmpty()) {
                // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
                val defaultWords = listOf(
                    WordPair("–ë—É—Ä–∞—Ç–∏–Ω–æ —É—Ç–æ–ø–∏–ª—Å—è", "–ë—É__—Ç–∏–Ω_ _—Ç–æ–ø_–ª—Å_"),
                    WordPair("–ö–æ–ª–æ–±–æ–∫ –ø–æ–≤–µ—Å–∏–ª—Å—è", "–ö_–ª–æ_–æ–∫ –ø_–≤_—Å–∏_—Å—è"),
                    WordPair("–ö—Ä–∞—Å–Ω–∞—è —à–∞–ø–æ—á–∫–∞", "–ö—Ä__–Ω–∞—è —à_–ø–æ_–∫–∞"),
                    WordPair("–°–µ—Ä—ã–π –≤–æ–ª–∫", "–°_—Ä_–π –≤_–ª–∫"),
                    WordPair("Minecraft —Å–µ—Ä–≤–µ—Ä", "M_n_cr_ft —Å_—Ä–≤_—Ä"),
                    WordPair("–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç", "–¢_–ª_–≥—Ä_–º –±_—Ç"),
                    WordPair("–ó–æ–ª–æ—Ç–æ–π –∫–ª—é—á–∏–∫", "–ó_–ª_—Ç_–π –∫–ª_—á_–∫"),
                    WordPair("–ó–µ–ª–µ–Ω—ã–π –æ–≥—Ä", "–ó_–ª_–Ω_–π –æ_—Ä"),
                    WordPair("–ü–æ–¥–∑–µ–º–µ–ª—å–µ –¥—Ä–∞–∫–æ–Ω–∞", "–ü_–¥–∑_–º_–ª—å_ –¥—Ä_–∫_–Ω–∞"),
                    WordPair("–í–æ–ª—à–µ–±–Ω–∞—è –ø–∞–ª–æ—á–∫–∞", "–í_–ª—à_–±–Ω_—è –ø_–ª_—á–∫_")
                )
                wordsList.addAll(defaultWords)
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –∫–æ–Ω—Ñ–∏–≥
                saveDefaultWords(defaultWords)
            }
            
            this.wordsList = wordsList
            
        } catch (e: Exception) {
            plugin.logger.severe("Failed to load game.yml: ${e.message}")
            e.printStackTrace()
        }
    }
    
    private fun saveDefaultWords(words: List<WordPair>) {
        try {
            val wordsSection = gameConfig.createSection("words")
            
            for (i in words.indices) {
                val wordSection = wordsSection.createSection("word$i")
                wordSection.set("original", words[i].original)
                wordSection.set("masked", words[i].masked)
            }
            
            gameConfig.save(gameFile)
        } catch (e: Exception) {
            plugin.logger.severe("Failed to save default words to game.yml: ${e.message}")
        }
    }
    
    fun startGame(telegramUsername: String, playerName: String): String {
        if (!enabled) {
            return "‚ùå –ò–≥—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞."
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–≥—Ä–∞–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ
        if (activeGames.containsKey(telegramUsername)) {
            return gameAlreadyPlayingMessage
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫
        val player = Bukkit.getPlayerExact(playerName)
        if (player == null && !Bukkit.getOfflinePlayer(playerName).hasPlayedBefore()) {
            return gamePlayerNotFoundMessage.replace("%player%", playerName)
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
        if (wordsList.isEmpty()) {
            return "‚ùå –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø—É—Å—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        }
        
        val randomWord = wordsList[Random.nextInt(wordsList.size)]
        
        // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
        val gameSession = GameSession(
            playerName = playerName,
            wordPair = randomWord,
            startTime = System.currentTimeMillis()
        )
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã –ø–æ —Ç–∞–π–º–∞—É—Ç—É
        val taskId = Bukkit.getScheduler().runTaskLater(plugin, Runnable {
            handleTimeout(telegramUsername)
        }, gameTimeSeconds * 20L).taskId
        
        gameSession.taskId = taskId
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
        activeGames[telegramUsername] = gameSession
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
        return gameStartMessage
            .replace("%word%", randomWord.masked)
            .replace("%time%", gameTimeSeconds.toString())
            .replace("\\n", "\n")
    }
    
    fun checkAnswer(telegramUsername: String, answer: String): Pair<Boolean, String> {
        val gameSession = activeGames[telegramUsername] ?: return Pair(false, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ù–∞–ø–∏—à–∏—Ç–µ /game [nickname] –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")
        
        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–ª–æ–≤–æ–º (–∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–µ–≥–∏—Å—Ç—Ä)
        if (answer.trim().equals(gameSession.wordPair.original, ignoreCase = true)) {
            // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            
            // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
            if (gameSession.taskId != -1) {
                Bukkit.getScheduler().cancelTask(gameSession.taskId)
            }
            
            // –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
            giveReward(gameSession.playerName)
            
            // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
            activeGames.remove(telegramUsername)
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ
            return Pair(true, gameWinMessage
                .replace("%word%", gameSession.wordPair.original)
                .replace("%reward%", rewardAmount.toString())
                .replace("\\n", "\n"))
        }
        
        // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        return Pair(false, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\nüéØ –°–ª–æ–≤–æ: ${gameSession.wordPair.masked}")
    }
    
    private fun handleTimeout(telegramUsername: String) {
        val gameSession = activeGames[telegramUsername] ?: return
        
        // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
        activeGames.remove(telegramUsername)
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–∏–≥—Ä—ã—à–µ
        val loseMessage = gameLoseMessage
            .replace("%word%", gameSession.wordPair.original)
            .replace("\\n", "\n")
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        plugin.getBot().sendToMainChannel(loseMessage)
    }
    
    private fun giveReward(playerName: String) {
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥
        Bukkit.getScheduler().runTask(plugin, Runnable {
            for (command in rewardCommands) {
                try {
                    val cmd = command.replace("%player%", playerName)
                    Bukkit.dispatchCommand(Bukkit.getConsoleSender(), cmd)
                } catch (e: Exception) {
                    plugin.logger.warning("Failed to execute reward command for player $playerName: ${e.message}")
                }
            }
        })
    }
    
    fun hasActiveGame(telegramUsername: String): Boolean {
        return activeGames.containsKey(telegramUsername)
    }
    
    fun getActiveGame(telegramUsername: String): GameSession? {
        return activeGames[telegramUsername]
    }
    
    fun cancelGame(telegramUsername: String): Boolean {
        val gameSession = activeGames[telegramUsername] ?: return false
        
        // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
        if (gameSession.taskId != -1) {
            Bukkit.getScheduler().cancelTask(gameSession.taskId)
        }
        
        // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
        activeGames.remove(telegramUsername)
        
        return true
    }
    
    fun cancelAllGames() {
        // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã
        for (gameSession in activeGames.values) {
            if (gameSession.taskId != -1) {
                Bukkit.getScheduler().cancelTask(gameSession.taskId)
            }
        }
        
        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
        activeGames.clear()
    }
} 