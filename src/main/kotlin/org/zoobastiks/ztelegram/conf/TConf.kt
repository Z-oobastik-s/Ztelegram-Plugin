package org.zoobastiks.ztelegram.conf

import org.bukkit.configuration.file.FileConfiguration
import org.bukkit.configuration.file.YamlConfiguration
import org.zoobastiks.ztelegram.ZTele
import java.io.File

class TConf(private val plugin: ZTele) {
    companion object {
        lateinit var botToken: String
            private set
    }
    
    // Channel IDs
    var mainChannelId: String = "-1002111043217"
    var consoleChannelId: String = "-1002656200279"
    var registerChannelId: String = "-1002611802353"
    
    // Main channel settings
    var mainChannelEnabled: Boolean = true
    var mainChannelChatEnabled: Boolean = true
    var formatTelegramToMinecraft: String = "&b[Telegram] &f%player%: &7%message%"
    var formatMinecraftToTelegram: String = "üì§ **%player%**: %message%"
    
    // Server events
    var serverStartEnabled: Boolean = true
    var serverStopEnabled: Boolean = true
    var serverStartMessage: String = "üü¢ Server started"
    var serverStopMessage: String = "üî¥ Server stopped"
    
    // Player events
    var playerJoinEnabled: Boolean = true
    var playerQuitEnabled: Boolean = true
    var playerDeathEnabled: Boolean = true
    var playerChatEnabled: Boolean = true
    var playerJoinMessage: String = "üü¢ %player% joined the server"
    var playerQuitMessage: String = "üî¥ %player% left the server"
    var playerDeathMessage: String = "üíÄ %player% %death_message%"
    
    // Telegram commands
    var enabledOnlineCommand: Boolean = true
    var enabledTpsCommand: Boolean = true
    var enabledRestartCommand: Boolean = true
    var enabledGenderCommand: Boolean = true
    var enabledPlayerCommand: Boolean = true
    
    // Telegram command responses
    var onlineCommandResponse: String = "Online: %online%/%max%\nPlayers: %players%"
    var tpsCommandResponse: String = "Server TPS: %tps%"
    var restartCommandResponse: String = "‚ö†Ô∏è Server is restarting..."
    var genderCommandUsage: String = "Usage: /gender [man/girl]"
    var genderCommandNoPlayer: String = "You need to register your nickname first!"
    var genderCommandResponse: String = "Gender for %player% set to %gender%"
    var playerCommandUsage: String = "Usage: /player <nickname>"
    var playerCommandNoPlayer: String = "Player %player% not found"
    var playerCommandResponse: String = "Player: %player%\nOnline: %online%\nHealth: %health%\nGender: %gender%\nRegistered: %registered%\nFirst played: %first_played%\nDeaths: %deaths%\nLevel: %level%\nBalance: %balance%\nCoordinates: %coords%"
    
    // –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
    var enabledCommandsListCommand: Boolean = true
    var commandsListResponse: String = """
        <gradient:#0052CC:#45B6FE>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</gradient>
        
        <gradient:#4CAF50:#8BC34A>‚Ä¢ /online, /–æ–Ω–ª–∞–π–Ω</gradient> - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω
        <gradient:#4CAF50:#8BC34A>‚Ä¢ /tps, /—Ç–ø—Å</gradient> - –ø–æ–∫–∞–∑–∞—Ç—å TPS —Å–µ—Ä–≤–µ—Ä–∞
        <gradient:#4CAF50:#8BC34A>‚Ä¢ /restart, /—Ä–µ—Å—Ç–∞—Ä—Ç</gradient> - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä
        <gradient:#4CAF50:#8BC34A>‚Ä¢ /gender [man/girl], /–ø–æ–ª [–º/–∂]</gradient> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –ø–æ–ª
        <gradient:#4CAF50:#8BC34A>‚Ä¢ /player [nickname], /–Ω–∏–∫ [–Ω–∏–∫–Ω–µ–π–º]</gradient> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ
        <gradient:#4CAF50:#8BC34A>‚Ä¢ /cmd, /–∫–æ–º–∞–Ω–¥—ã</gradient> - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
        <gradient:#4CAF50:#8BC34A>‚Ä¢ /game [nickname], /–∏–≥—Ä–∞ [–Ω–∏–∫–Ω–µ–π–º]</gradient> - —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É "–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ"
        
        <gradient:#FF9800:#FFEB3B>–ö–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö:</gradient>
        ‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
        ‚Ä¢ –ö–∞–Ω–∞–ª –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: —Ç–æ–ª—å–∫–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ‚Ä¢ –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª: –ª—é–±—ã–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    """
    
    // Gender translations
    var genderTranslations: Map<String, String> = mapOf(
        "man" to "–ú—É–∂—á–∏–Ω–∞",
        "girl" to "–ñ–µ–Ω—â–∏–Ω–∞"
    )
    
    // Status translations
    var statusTranslations: Map<String, String> = mapOf(
        "online" to "–û–Ω–ª–∞–π–Ω",
        "offline" to "–û—Ñ—Ñ–ª–∞–π–Ω",
        "not_set" to "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
        "not_registered" to "–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
        "never" to "–ù–∏–∫–æ–≥–¥–∞"
    )
    
    // Console channel settings
    var consoleChannelEnabled: Boolean = true
    var playerCommandLogEnabled: Boolean = true
    var playerCommandLogFormat: String = "[%time%] %player% executed: %command%"
    var consoleCommandFeedbackEnabled: Boolean = true
    var consoleCommandFeedback: String = "‚úÖ Command executed: %command%"
    var consoleCommandError: String = "‚ùå Command failed: %command%\nError: %error%"
    
    // Register channel settings
    var registerChannelEnabled: Boolean = true
    var registerInvalidUsername: String = "‚ùå Invalid username: %player%"
    var registerAlreadyRegistered: String = "‚ùå Player %player% is already registered"
    var registerPlayerOffline: String = "‚ùå Player %player% is not online"
    var registerSuccess: String = "‚úÖ Successfully registered player %player%"
    var registerSuccessInGame: String = "¬ßa‚úÖ Your account has been linked to Telegram!"
    var registerRewardCommands: List<String> = listOf("eco give %player% 50")
    
    // Plugin settings
    var pluginPrefix: String = "¬ßb[ZTelegram]¬ßr"
    var telegramLink: String = "https://t.me/ReZoobastik"
    var telegramCommandMessage: String = "<gradient:#FF0000:#A6EB0F>„Äî–¢–µ–ª–µ–≥—Ä–∞–º„Äï</gradient> <hover:show_text:\"–ö–ª–∏–∫–Ω–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª\"><gradient:#A6EB0F:#00FF00>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É Telegram –∫–∞–Ω–∞–ª—É!</gradient></hover>"
    
    // Files
    private val playersFile = File(plugin.dataFolder, "players.yml")
    private lateinit var playersConfig: YamlConfiguration
    
    init {
        plugin.saveDefaultConfig()
        if (!playersFile.exists()) {
            plugin.saveResource("players.yml", false)
        }
        
        playersConfig = YamlConfiguration.loadConfiguration(playersFile)
        loadConfig()
    }
    
    fun reload() {
        plugin.reloadConfig()
        playersConfig = YamlConfiguration.loadConfiguration(playersFile)
        loadConfig()
    }
    
    fun getPlayersConfig(): YamlConfiguration {
        return playersConfig
    }
    
    fun savePlayersConfig() {
        try {
            playersConfig.save(playersFile)
        } catch (e: Exception) {
            plugin.logger.severe("Could not save players.yml: ${e.message}")
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è gender
    fun getGenderTranslation(gender: String): String {
        return genderTranslations[gender.lowercase()] ?: gender
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
    fun getStatusTranslation(status: String): String {
        val key = status.lowercase().replace(" ", "_")
        return statusTranslations[key] ?: status
    }
    
    private fun loadConfig() {
        val conf = plugin.config
        
        // Bot settings
        botToken = conf.getString("bot.token", "") ?: ""
        
        // Channel IDs
        mainChannelId = conf.getString("channels.main", "-1002111043217") ?: "-1002111043217"
        consoleChannelId = conf.getString("channels.console", "-1002656200279") ?: "-1002656200279"
        registerChannelId = conf.getString("channels.register", "-1002611802353") ?: "-1002611802353"
        
        // Main channel settings
        mainChannelEnabled = conf.getBoolean("main-channel.enabled", true)
        mainChannelChatEnabled = conf.getBoolean("main-channel.chat-enabled", true)
        formatTelegramToMinecraft = conf.getString("main-channel.format-telegram-to-minecraft", formatTelegramToMinecraft) ?: formatTelegramToMinecraft
        formatMinecraftToTelegram = conf.getString("main-channel.format-minecraft-to-telegram", formatMinecraftToTelegram) ?: formatMinecraftToTelegram
        
        // Server events
        serverStartEnabled = conf.getBoolean("events.server-start.enabled", true)
        serverStopEnabled = conf.getBoolean("events.server-stop.enabled", true)
        serverStartMessage = conf.getString("events.server-start.message", serverStartMessage) ?: serverStartMessage
        serverStopMessage = conf.getString("events.server-stop.message", serverStopMessage) ?: serverStopMessage
        
        // Player events
        playerJoinEnabled = conf.getBoolean("events.player-join.enabled", true)
        playerQuitEnabled = conf.getBoolean("events.player-quit.enabled", true)
        playerDeathEnabled = conf.getBoolean("events.player-death.enabled", true)
        playerChatEnabled = conf.getBoolean("events.player-chat.enabled", true)
        playerJoinMessage = conf.getString("events.player-join.message", playerJoinMessage) ?: playerJoinMessage
        playerQuitMessage = conf.getString("events.player-quit.message", playerQuitMessage) ?: playerQuitMessage
        playerDeathMessage = conf.getString("events.player-death.message", playerDeathMessage) ?: playerDeathMessage
        
        // Telegram commands
        enabledOnlineCommand = conf.getBoolean("commands.online.enabled", true)
        enabledTpsCommand = conf.getBoolean("commands.tps.enabled", true)
        enabledRestartCommand = conf.getBoolean("commands.restart.enabled", true)
        enabledGenderCommand = conf.getBoolean("commands.gender.enabled", true)
        enabledPlayerCommand = conf.getBoolean("commands.player.enabled", true)
        
        // Telegram command responses
        onlineCommandResponse = conf.getString("commands.online.response", onlineCommandResponse) ?: onlineCommandResponse
        tpsCommandResponse = conf.getString("commands.tps.response", tpsCommandResponse) ?: tpsCommandResponse
        restartCommandResponse = conf.getString("commands.restart.response", restartCommandResponse) ?: restartCommandResponse
        genderCommandUsage = conf.getString("commands.gender.usage", genderCommandUsage) ?: genderCommandUsage
        genderCommandNoPlayer = conf.getString("commands.gender.no-player", genderCommandNoPlayer) ?: genderCommandNoPlayer
        genderCommandResponse = conf.getString("commands.gender.response", genderCommandResponse) ?: genderCommandResponse
        playerCommandUsage = conf.getString("commands.player.usage", playerCommandUsage) ?: playerCommandUsage
        playerCommandNoPlayer = conf.getString("commands.player.no-player", playerCommandNoPlayer) ?: playerCommandNoPlayer
        playerCommandResponse = conf.getString("commands.player.response", playerCommandResponse) ?: playerCommandResponse
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
        enabledCommandsListCommand = conf.getBoolean("commands.cmd_list.enabled", true)
        commandsListResponse = conf.getString("commands.cmd_list.response", commandsListResponse) ?: commandsListResponse
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è gender –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        val genderTranslationsSection = conf.getConfigurationSection("commands.gender.translations")
        if (genderTranslationsSection != null) {
            val translations = mutableMapOf<String, String>()
            for (key in genderTranslationsSection.getKeys(false)) {
                val translation = genderTranslationsSection.getString(key)
                if (translation != null) {
                    translations[key] = translation
                }
            }
            if (translations.isNotEmpty()) {
                genderTranslations = translations
            }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        val statusTranslationsSection = conf.getConfigurationSection("commands.player.translations")
        if (statusTranslationsSection != null) {
            val translations = mutableMapOf<String, String>()
            for (key in statusTranslationsSection.getKeys(false)) {
                val translation = statusTranslationsSection.getString(key)
                if (translation != null) {
                    translations[key] = translation
                }
            }
            if (translations.isNotEmpty()) {
                statusTranslations = translations
            }
        }
        
        // Console channel settings
        consoleChannelEnabled = conf.getBoolean("console-channel.enabled", true)
        playerCommandLogEnabled = conf.getBoolean("console-channel.player-command-log.enabled", true)
        playerCommandLogFormat = conf.getString("console-channel.player-command-log.format", playerCommandLogFormat) ?: playerCommandLogFormat
        consoleCommandFeedbackEnabled = conf.getBoolean("console-channel.command-feedback.enabled", true)
        consoleCommandFeedback = conf.getString("console-channel.command-feedback.success", consoleCommandFeedback) ?: consoleCommandFeedback
        consoleCommandError = conf.getString("console-channel.command-feedback.error", consoleCommandError) ?: consoleCommandError
        
        // Register channel settings
        registerChannelEnabled = conf.getBoolean("register-channel.enabled", true)
        registerInvalidUsername = conf.getString("register-channel.invalid-username", registerInvalidUsername) ?: registerInvalidUsername
        registerAlreadyRegistered = conf.getString("register-channel.already-registered", registerAlreadyRegistered) ?: registerAlreadyRegistered
        registerPlayerOffline = conf.getString("register-channel.player-offline", registerPlayerOffline) ?: registerPlayerOffline
        registerSuccess = conf.getString("register-channel.success", registerSuccess) ?: registerSuccess
        registerSuccessInGame = conf.getString("register-channel.success-in-game", registerSuccessInGame) ?: registerSuccessInGame
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–≥—Ä–∞–¥ –≤–º–µ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã
        registerRewardCommands = conf.getStringList("register-channel.reward-commands")
        if (registerRewardCommands.isEmpty()) {
            registerRewardCommands = listOf("eco give %player% 50")
        }
        
        // Plugin settings
        pluginPrefix = conf.getString("plugin.prefix", pluginPrefix) ?: pluginPrefix
        telegramLink = conf.getString("plugin.telegram-link", telegramLink) ?: telegramLink
        telegramCommandMessage = conf.getString("plugin.telegram-command-message", telegramCommandMessage) ?: telegramCommandMessage
    }
} 